# Generated by Django 4.2.7 on 2023-12-05 04:41

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AuthGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=150, null=True, unique=True
                    ),
                ),
            ],
            options={
                "db_table": "auth_group",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthGroupPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_group_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("codename", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "db_table": "auth_permission",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(blank=True, max_length=128, null=True)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("is_superuser", models.BooleanField()),
                (
                    "username",
                    models.CharField(
                        blank=True, max_length=150, null=True, unique=True
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, null=True)),
                ("last_name", models.CharField(blank=True, max_length=150, null=True)),
                ("email", models.CharField(blank=True, max_length=254, null=True)),
                ("is_staff", models.BooleanField()),
                ("is_active", models.BooleanField()),
                ("date_joined", models.DateTimeField()),
            ],
            options={
                "db_table": "auth_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserGroups",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_groups",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="AuthUserUserPermissions",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "auth_user_user_permissions",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Cliente",
            fields=[
                ("id_cliente", models.BigAutoField(primary_key=True, serialize=False)),
                ("rut_cliente", models.BigIntegerField()),
                ("dv_cliente", models.CharField(max_length=1)),
                ("pnombre", models.CharField(max_length=50)),
                ("snombre", models.CharField(blank=True, max_length=50, null=True)),
                ("apellidom", models.CharField(max_length=50)),
                ("apellidop", models.CharField(max_length=50)),
                ("telefono", models.BigIntegerField()),
                ("edad", models.BigIntegerField()),
                ("direccion", models.CharField(max_length=50)),
                ("correo", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "cliente",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Comuna",
            fields=[
                ("id_comuna", models.BigAutoField(primary_key=True, serialize=False)),
                ("descripcion", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "comuna",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoAdminLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("action_time", models.DateTimeField()),
                ("object_id", models.TextField(blank=True, null=True)),
                (
                    "object_repr",
                    models.CharField(blank=True, max_length=200, null=True),
                ),
                ("action_flag", models.IntegerField()),
                ("change_message", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "django_admin_log",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoContentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("app_label", models.CharField(blank=True, max_length=100, null=True)),
                ("model", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "db_table": "django_content_type",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoMigrations",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("app", models.CharField(blank=True, max_length=255, null=True)),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("applied", models.DateTimeField()),
            ],
            options={
                "db_table": "django_migrations",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="DjangoSession",
            fields=[
                (
                    "session_key",
                    models.CharField(max_length=40, primary_key=True, serialize=False),
                ),
                ("session_data", models.TextField(blank=True, null=True)),
                ("expire_date", models.DateTimeField()),
            ],
            options={
                "db_table": "django_session",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Envio",
            fields=[
                ("id_envio", models.BigAutoField(primary_key=True, serialize=False)),
                ("descripcion", models.CharField(max_length=50)),
                ("direccion", models.CharField(max_length=50)),
                ("ncomuna", models.CharField(max_length=50)),
                ("nregion", models.CharField(max_length=50)),
                ("enviopagado", models.CharField(max_length=1)),
                ("tipo_envio", models.CharField(max_length=50)),
                ("peso", models.BigIntegerField()),
                ("fecha_envio", models.DateField()),
            ],
            options={
                "db_table": "envio",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="EstadoCivil",
            fields=[
                ("id_estado", models.BigAutoField(primary_key=True, serialize=False)),
                ("descripcion", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "estado_civil",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="GreenmarketappUsuario",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "username",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                ("password", models.CharField(blank=True, max_length=100, null=True)),
                ("tipo_perfil", models.CharField(blank=True, max_length=10, null=True)),
                ("rut_cliente", models.BigIntegerField()),
                ("rut_proveedor", models.BigIntegerField()),
            ],
            options={
                "db_table": "greenmarketapp_usuario",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="LoginUser",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("username", models.CharField(blank=True, max_length=30, null=True)),
                ("password", models.CharField(blank=True, max_length=30, null=True)),
                ("user_type", models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                "db_table": "login_user",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrdenCompra",
            fields=[
                ("id_compra", models.BigAutoField(primary_key=True, serialize=False)),
                ("id_proveedor", models.BigIntegerField()),
                ("id_cliente", models.BigIntegerField()),
                ("fecha_compra", models.CharField(max_length=50)),
                ("cant_compra", models.BigIntegerField()),
                ("valor_neto", models.BigIntegerField()),
                ("iva", models.BigIntegerField()),
                ("valor_total", models.BigIntegerField()),
            ],
            options={
                "db_table": "orden_compra",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="OrdenTrueque",
            fields=[
                ("id_otrueque", models.BigAutoField(primary_key=True, serialize=False)),
                ("origen", models.CharField(max_length=50)),
                ("destino", models.CharField(max_length=50)),
                ("descripcion", models.CharField(max_length=50)),
                ("cant_recibida", models.BigIntegerField()),
                ("cant_enviada", models.BigIntegerField()),
                ("itrueque", models.CharField(max_length=50)),
                ("dtrueque", models.CharField(max_length=50)),
                ("fecha_trueque", models.DateField()),
                ("prod_enviado", models.CharField(max_length=50)),
                ("prod_recibido", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "orden_trueque",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Pago",
            fields=[
                ("id_pago", models.BigAutoField(primary_key=True, serialize=False)),
                ("descripcion", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "pago",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Proveedor",
            fields=[
                (
                    "id_proveedor",
                    models.BigAutoField(primary_key=True, serialize=False),
                ),
                ("rut_proveedor", models.BigIntegerField()),
                ("dv_proveedor", models.CharField(max_length=1)),
                ("edad", models.BigIntegerField()),
                ("nombre_proveedor", models.CharField(max_length=50)),
                ("apellidom", models.CharField(max_length=50)),
                ("apellidop", models.CharField(max_length=50)),
                ("direccion", models.CharField(max_length=50)),
                ("nombre_tienda", models.CharField(max_length=50)),
                ("descripcion", models.CharField(max_length=50)),
                ("telefono", models.BigIntegerField()),
                ("correo", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "proveedor",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                ("id_region", models.BigAutoField(primary_key=True, serialize=False)),
                ("descripcion", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "region",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Reporte",
            fields=[
                ("id_reporte", models.BigAutoField(primary_key=True, serialize=False)),
                ("fecha", models.DateField()),
                ("descripcion", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "reporte",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Sexo",
            fields=[
                ("id_sexo", models.BigAutoField(primary_key=True, serialize=False)),
                ("descripcion", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "sexo",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TruequeProveedor",
            fields=[
                (
                    "id_trueque_proveedor",
                    models.BigAutoField(primary_key=True, serialize=False),
                ),
                ("id_proveedor", models.BigIntegerField()),
            ],
            options={
                "db_table": "trueque_proveedor",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Usuario",
            fields=[
                ("id_usuario", models.BigAutoField(primary_key=True, serialize=False)),
                ("username", models.CharField(max_length=50, unique=True)),
                ("password", models.CharField(max_length=100)),
                ("tipo_perfil", models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                "db_table": "usuario",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("id_usuario", models.BigAutoField(primary_key=True, serialize=False)),
                ("tipo_perfil", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "usuario",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
